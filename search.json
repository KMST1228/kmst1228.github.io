[{"title":"CMake学习记录","url":"/posts/4ecb.html","content":"将以前学习过的CMake相关知识做个记录，温故知新\n\n\n基本原理C&#x2F;C++的编译及运行过程（预处理 → 编译 → 汇编 → 链接 → 运行）中会进行如下工作：\n\n预处理阶段：进行头文件与宏的展开，以及处理其他预处理命令\n链接阶段：将前述步骤中得到的.o文件以及静态库.a文件链接成为最终的可执行文件\n运行阶段：将调用到动态库中函数时，对.so文件进行动态链接\n\nCMake&#x2F;Makefile的主要作用是为编译提供一套自动化规则，编写CMake&#x2F;Makefile最重要的步骤是为编译器提供编译目标（可执行文件、动态库等）以及帮助编译器找到依赖文件（头文件、静态库），这是编写CMake的指导思想。\n基础指令根目录CMakeListscmake_minimum_required(VERSION 4.0) # 指定构建该项目所需的CMake最低版本（一般建议写）project(CMakeLearning) # 指定工程名（创建工程句柄）set(CMAKE_CXX_STANDARD 23) # 指定C/C++标准add_subdirectory(sub_dir) # 添加子目录到工程（一般用于工程有多个子模块，该函数会将子目录的CMakeLists的规则添加至主工程）\n子模块add_executable(main main.cpp xxx.cpp) # 添加可执行文件编译目标，并指定目标依赖项target_include_directories(&lt;target&gt; PUBLIC/PRIVATE/INTERFACE &lt;path&gt;) # 添加头文件路径至指定编译目标（target），第二个参数用于指定该路径的作用域include_directories(&lt;path&gt;) # 添加头文件路径至工程，一般不推荐使用\n\n添加预编译宏add_definitions(-Dxxx) # 为使用该CMakeLists的工程添加宏定义xxx\n\n静态库add_library(sample sample.cpp) # 添加静态库编译目标，参数1为目标名，后续为依赖项，最终会在build文件夹内生成libsample.a文件（示例为GUN，若使用MSVC则为libsample.lib）# 不推荐使用link_libraries(/home/wufei/CLionProjects/CMakeLearning/lesson2_1/lib/libadd_static.a) # 将目标静态库文件添加至工程，此命令必须使用绝对路径直接指定静态库# 作为替代推荐使用下述两个函数# 注意：下述两个函数必须在add_executable指定编译目标（target）之后使用target_link_directories(lesson2_1 PUBLIC ./lib) # 添加头文件路径至指定编译目标（target），第二个参数用于指定该路径的作用域target_link_libraries(lesson2_1 PRIVATE libadd_static.a) # 添加静态库至指定编译目标（target）\n\n这两个命令中：\n\ntarget_link_directories其实就是为gcc指令添加-L字段（指定链接库的包含路径）以及-Wl -rpath（为链接器提供动态库的运行时路径，即使没有使用到动态库）\ntarget_link_libraries则是添加-l字段（指定链接库名称）\n\n动态库1. GNUadd_library(sample SHARED sample.cpp) # 添加动态库编译目标，参数1为目标名，参数2为指定目标为动态库，后续为依赖项，最终会在build文件夹内生成libsample.so文件（示例为GUN，若使用MSVC则为libsample.dll）#动态库使用方法与静态库完全相同\n2. MSVC源文件函数定义前需加上关键字 __declspec(dllexport)，在CMakeLists中添加EXPORT定义，如此在编译动态库时为export，在main使用动态库函数时为import\n// export.h#ifdef EXPORT#define DLL_API __declspec(dllexport)#else#define DLL_API __declspec(dllimport)#endif// sample.cppDLL_API int add(int a， int b)&#123;    return a + b;&#125;\n在使用add_library(sample SHARED sample.cpp)指令生成动态库时，会同时生成.lib文件与.dll文件，链接时需用到.lib文件，运行时需要.dll文件\ntarget_compile_definitions(add_shared PRIVATE EXPORT) # 在编译动态库时，为export宏提供定义target_link_directories(lesson2_2 PUBLIC ./lib) # 添加头文件路径至指定编译目标（target），第二个参数用于指定该路径的作用域target_link_libraries(lesson2_2 libadd_shared.lib) # 此处仍使用.lib文件，运行时需将.dll文件与可执行文件置于同一目录下\n\n其他区别除了上面提到的两个平台下的动态库的区别，另外一个比较重要的区别是：\nlinux下可以在链接时为可执行文件链接的动态库指定路径，链接成功后可以通过ldd命令查看与可执行文件链接的动态库以及它们的路径。\n而windows下动态库加载时的查找是按照一定顺序进行的：可执行文件所在目录→当前目录→system32目录→windows目录→指定环境变量目录\nCMake 跨平台特性从 gcc 到 Makefile利用gcc对C语言文件进行编译，最简单的情况下只需要一句\ngcc main.c\n但实际上编译器依然是按照【预处理 → 编译 → 汇编 → 链接】的流程进行实现\ngcc -E xxx.c -o xxx.igcc -S xxx.i -o xxx.sgcc -c xxx.s -o xxx.ogcc xxx.o yyy.o -o mian\n\nMakefile的诞生就是为了不每次编译时都手动输入一系列指令。\nMakefile可以看作一个编译脚本，只不过它的运行过程不是从上往下依次执行每一条语句，而是通过依赖项进行检索实现。Makefile文件执行编译的最基本语句结构为：\ntarget_1 ： depend_1 depend_2    command_1depend_1 ： depend_1_1 depend_1_2    command_2target_2 ：  depend_3    command_3\n\n一条语句中会指明该语句的目标、依赖项以及命令。在make流程中，只会执行Makefile中的第一条语句，判断是否已存在该语句的依赖项，若不存在，则会往下检索依赖项的生成方式，若已存在，则会直接执行，然后结束。\n例如示例中，make流程只会尝试生成target_1，若depend_1与depend_2已存在，则直接执行command_1后结束流程，若缺少depend_1，则会向下寻找到目标为depend_1的语句command_2并执行，然后再判断depend_2是否存在，若不存在也无法找到目标为depend_2的语句，则流程失败。\n既然已经存在进行编译的脚本框架，为什么还需要CMake呢？有两个原因：\n首先，与GNU采用Makefile的方式不同，MSVC作为立足于VisualStudio平台的编译框架，它的编译流程是在VisualStudio的sln解决方案中的。这就导致windows平台与linux平台有两套截然不同的编译方式（严谨点说是MSVC和GNU两种编译链工具下）。\n其次，Makefile的语法过于古老与繁琐，手动编写Makefile在大型项目中耗费时间精力且易出错。\nCMake的立身之本CMake的问世是为了给C语言工程跨平台编译提供一个通用的解决方案，同时使用一些现代化的语法与组织架构解决Makefile的编写困难问题。\nCMake的实际作用是，为C语言工程根据当前的或你指定的目标平台，生成该平台的编译方案（Makefile、sln等），或者通过相同的命令直接生成对应平台的可执行文件：\ncmake --build .\n\n减轻依赖减轻依赖的核心是按照调用依赖关系进行依赖，而不是让main依赖所有其他文件\n核心是动态库章节中提到的target_link_directories命令中的第二个字段：\ntarget_include_directories([target] PUBLIC/PRIVATE/INTERFACE [path])\n\ntarget_include_directoriesPUBLIC&#x2F;PRIVATE&#x2F;INTERFACE字段指定了该路径是否会被继承：\n\nPUBLIC表示该路径会对该target生效并且会被继承给所有依赖该target的target\nPRIVATE表示该路径只会对该target生效\n\n例如A、B和C的CMakeLists分别为：\n# Aadd_library(A STATIC A.cpp)target_link_libraries(A PRIVATE B)target_include_directories(A PUBLIC ../B)# Badd_library(B STATIC B.cpp)target_link_libraries(B PRIVATE C)target_include_directories(B PUBLIC ../C)# Cadd_library(C STATIC C.cpp)\n其中在B的CMakeLists中使用了target_include_directories将C的路径添加到target B的生成过程中，若这个命令中的作用域为：\n\nPRIVATE：C的路径只会在target B的生成过程中被添加，依赖B的A则不会获得C的include路径，在目标A的源文件中使用include包含路径C下的头文件会失败\nPUBLIC：C的路径会在target B以及所有依赖target B的target的生成过程中被添加，可以在目标A的源文件中使用include包含路径C下的头文件\n\ntarget_include_directories的作用表现为在target的编译过程中，C的路径是否会被添加至-L字段中。\n更进一步上述CMakeLists内容存在一个问题，在A的CMakeLists中，与B相关的语句出现了两次，一次是target_link_libraries为A添加依赖项，一次是target_include_directories将B的头文件路径包含进来。\n这样一来如果B模块内的工程结构发生变化，需要修改target_include_directories的路径，如果只有A一个模块依赖B模块还好，如果有多个模块依赖B模块，则需要对所有出现这个路径的CMakeLists进行修改，十分繁琐，幸好有一个很好的解决办法：\n# Aadd_library(A STATIC A.cpp)target_link_libraries(A PRIVATE B)# Badd_library(B STATIC B.cpp)target_link_libraries(B PRIVATE C)target_include_directories(B PUBLIC ./)# Cadd_library(C STATIC C.cpp)target_include_directories(C PUBLIC ./)\n将模块的头文件路径放在自己的目标生成规则中，target_link_libraries(A PRIVATE B)语句会把目标B所包含的include路径传递给A以及所有依赖B的模块，修改B的include路径会影响所有依赖B的模块；而由于B依赖C时使用的是PRIVATE，则依赖B的A不会得到模块C的include路径。\n这就是减轻依赖的核心，也就是利用继承关系控制include路径的传递。\n餐后甜点值得注意的是，如果观察编译过程会发现：\n\n在main所依赖的target的生成过程中，始终未使用到它们依赖的静态库或动态库，原因是所有依赖的libraries只在最终链接最上层target时使用；\n在编译时，生成目标所需的静态库的路径是工程文件的目录，编译中该路径下从未出现过.a文件，然而却能正常完成链接，这是因为在链接时链接器会把这个路径理解为build目录下的对应路径。\n\n小tips# 显示cmake build过程执行的每一条命令cmake .. -DCMAKE_VERBOSE_MAKEFILE=ON# linux下显示与可执行文件链接的动态库以及动态库所在路径ldd xxx\n\n\n更多gcc命令\n","categories":["学习"]},{"title":"P3R游玩感想","url":"/posts/d882.html","content":"\n  建议播放BGM\n\n\n\n\n23年上半年嫖室友的steam库打完了P5R，顺带稍微云了下P3和P4，之后碰到24年初P3R发售，虽然一直很馋P系列新约的开山之作，但是碍于读研、找工作还有略寒酸的经济条件，一直没机会尝试。终于，在上个月搬完家安顿好之后，成功嫖到另一个朋友的P3R，遂进行一个游玩。\n翻了下和朋友的聊天（吐槽）记录，从7月25日断断续续玩到今天（8月31日）一周目通关，steam游玩时间 53.4 小时，中间丢过一次存档，所以游戏存档时间少了大概四、五个小时。游戏完成度方面，有兴趣的COOP基本都推完了；伊丽莎白的委托能顺手做就做，一些合面具以及收集物品的委托实在找不到也懒得查攻略就没做。\n此感想纯属个人观点，另外由于本人鱼的记忆，对P5R的回忆部分很可能不准确。\n在开始之前先感谢朋友HWH的赞助的P3R steam版，并在此督促尽快购买DLC。\n\n\n\n\n战斗系统\n\nP3R和P5R的战斗系统基本一样，P5R多了COOP给的被动技能和没什么存在感的枪击，P3R多了大招（神通法）和个人被动技能，相比起来P3R稍微更好玩一点，但是这一点微小的差别不影响对P3R的战斗系统评价和P5R基本一致：鸡肋。\n个人感觉，P5R的战斗系统问题在于BOSS没有弱点还免疫各种异常状态，这就导致主推的换手系统屁用没有；P3R精英怪多BOSS战少弥补了这一点（真的是优点吗），但是物理P的强势以及换手增伤的删除又拉回去了。\n至于爬塔（塔尔塔洛斯），早在玩P5R时，地铁就玩得我想睡觉，到了P3R，复制粘贴又臭又长的爬塔直接给我玩麻了，特别是前期还想体验一下Hard难度，经常刚打开游戏，爬了俩小时塔后实在受不了关电脑倒头就睡，玩到中后面开始不装了，直接飞哥删除一切怪物。总的来说，不如P5R宫殿一根毛。\n局外成长方面，P3R可以通过夜晚在宿舍的互动获得和升级他们的被动技能，算是给游戏拉跨的COOP时间安排扳回一点，互动剧情又给角色塑造增加了更多篇幅，但感觉这个属于剧情方面，放在后面再讲。\n至于人格面具方面，感觉和P5R差别不大，本人也没深入研究，略过不讲。\n\n\n剧情和COOP\n\n一直觉得日程式的剧情推进以及COOP才是P系列的灵魂，但是P3R的COOP日程安排设计拉跨得一批：\n\n大部分学校里的COOP对象一到周末或假期就联系不上（偶尔有人约你看电影，但是不能推进COOP等级屁用没有）；\n晚上更是只有恶魔和塔两个COOP，本人前期晚上时间几乎都花在了打工上，中期开始有队友的特殊互动来解锁被动特性，就算这样到了最后几个月每天晚上几乎都在无所事事，非常弱智；\n最后还有一点就是COOP剧情和主线剧情的割裂，这倒是和P5R的通病了，例如12月会长COOP才开，导致倪克斯要来了会长还在纠结她的婚约。\n\n主线剧情方面，只能说中规中矩，前期过于平淡，和队友的关系也像是单纯的同事；到了倪克斯的悬念揭晓，队伍团结起来之后观感好了不少。\n剧情结局，结城理完成伟大封印，凭借与队友的约定撑了两个月，等队友取回记忆后在簇拥中死去这段，说实话我最开始没get到，还以为是happy ending。不管怎么说，这段演出加上bgm直接把我从油咖喱党掰成埃癸斯党（或者说我全都要），评价为神中神。\n\n\n社群剧情&amp;角色塑造\n\n愚者 - SEES\n\n表面队友，一盘散沙，每个月集合爬一次塔像极了我每天上班的样子，队友里还有来寻仇的更是为小队增添了一份神性。\n魔术师 - 友近 健二\n\n干饭二人组之一，作为最早跟主角搭话的几个人之一，COOP剧情还是比较乐的，只能说追老师是主角专属待遇，看在好兄弟脾气比较好的份上我少笑两声。\n女教皇 - 山岸 风花\n\n\n脑婆！抛开可爱不谈，能把牢理的扑克脸干碎的除了倪克斯只剩她了，需要勇气才能品尝的便当的含金量。\n女皇 - 桐条 美鹤\n\n前领队，公式化深闺大小姐，公式化学生会长，公式化家族联姻，最后一个月一边被倪克斯的阴影笼罩一边看她跟未婚夫掰扯更是享受。\n教皇 - 书店夫妻\n\n这两位是真的把没爹没娘的结城理当孙子看待，很难不让人喜欢，又得吐槽这弱智COOP安排，学校的伙计们一放假就隐身，导致平时只能看着老头儿每天在手机里求着你过去却只能先做同学COOP。\n恋爱 - 岳羽 由加莉\n\n脑婆！但是小丑🤡，约定是和别人的，膝枕也是别人的，CG里是当背景板的，你觉得你是恋爱吗，输完了（但是比高卷杏有女友感，赢）。\n正义 - 伏见 千寻\n\n大额头可爱，但是总感觉会刀人的样子，另外剧情有些拖沓了，最后事情解决得也挺随意的，一般。\n隐者 - 鸟海 浩子\n\n冲浪高手，网恋大师，但是建模不对胃口，可惜。\n力量 - 西胁 结子\n\n黑皮体育生妹妹是对的，剧情里也很主动大胆，可惜厚嘴唇是错的，遗憾退场。\n倒吊人 - 小女孩\n\n本身剧情还不错，但是从她说出要当哥哥的新娘那一刻起就不对了，只能说鸣上悠和雨宫莲也干了。\n死神 - ？？？\n\n我超，有南通！虽然前期当谜语人很烦，但是最后还是舍不得的，如果是妹妹该多好。\n节制 - 贝培\n\n伏拉夫之法国分夫（虽然是云的，他和胖子属于是一眼让人放弃的COOP）。\n恶魔 - 田中\n\n歌比人出名，虽然他的COOP不是我主动想推的（谁让晚上只能推他和和尚），但是剧情其实还不错，虽然还是感觉他的成长跟我没啥关系的老问题。\n塔 - 无达\n\n意义不明的COOP，莫名其妙的和尚，抛妻弃子已经够逆天了，我啥也没干自己想通了回去包饺子更是让人满头问号。\n星 - 早濑\n\n干饭二人组之二，兄弟是真的好兄弟，兄弟也是真的惨，再也不想笑兄弟进厂了，希望能给个好结局吧。\n月亮 - 末光 望美\n\n神人编剧写出的神人剧情，很难想象什么人会在最后的选项里选择“好像能理解”。虽然外貌让我从未点进过他的COOP，但是为了弥补没有看过P系列史上最抽象的COOP的遗憾，我特意去补了他的COOP剧情，感觉浪费了人生的十分钟。\n太阳 - 神木 秋成\n\n神木哥的COOP主题是人类史上最经久不衰的议题之一——生命与死亡，生命的意义是什么？如何面对死亡？这两个问题应该成为所有人的必修课。\n审判 - SEES\n\n倪克斯的威胁让SEES团结起来之后，让整个小队的精神面貌都不一样了，成长和蜕变才是RPG游戏的灵魂，好评。\n永劫 - 埃癸斯\n\nCOOP在讲埃癸斯从冰冷的机械获得生命的过程，题材过于常见的缘故感觉一般般，但主线结合COOP的情绪推动真的神中神，很难不爱上。\n顺平 & 真田\n\n这俩人必须放一起讲，从剧情开篇到结局，俩人给我的印象的走势是完全相反的。\n顺平的形象在前期还只是在合理范围内的热血和偶尔冒进，自从遇见飞鸟后一路下滑，如果说到这里为止还只是恋爱脑上头疯狂展现自我，死神的真相揭露后对结城理的职责就是压死骆驼的最后一根稻草，听说后日谈里他回归正常人了，不过我没玩过就当不存在。\n真田刚出场给我的印象是喜欢装逼的武痴型角色，不是喜欢的类型。但是在剧情里的逗比表现慢慢让他的形象立体起来，到最后作为学长朝着自己的目标坚定前进完成了整个人物形象的建立。总的来说虽然他在主线里较为隐身（不一定是坏事），但是整体展现出的形象比顺平有趣太多。\n几月\n\n意义不明的动机，突兀的跳反和去世，纯小丑。\n总结\n\n P3R的人物塑造还是太过抽象，剧情不是寡淡就是到处乱飞（特指月亮），看在少数几个比较喜欢的角色的份上勉强及格。\n\n\n美术\n\n伟大，无需多言。\n\n\n音乐\n\n其实打到一半，我跟朋友吐槽过P3R没有让人印象深刻的BGM，在音乐方面它还是不如P5——在结局前我确实是这么想的，然后一首キミの記憶直接听到高潮。埃癸斯在我心中的地位有 70% 来自结尾的演出和BGM，如果说在此之前她的剧情只是一个公式化的机器人找到自己人格的故事，在这之后她真正成为了结城理的灵魂伴侣。\n另外，结局之后再听到逛街的小曲Color Your Night后劲也很大。\n\n\n结语\n\n2025年7月，对大多数人来说可能只是一个普通的夏天，对我来说，有惊无险的毕业、刚入职还处于轻松的培训阶段以及一台新的PC，共同组成了这个几年来最放松的也可能是人生中最后的一个暑期。\n在这一个月断断续续的游玩中，狗屎塔尔塔洛斯加上一次存档丢失让我差点不想继续下去，通关之后却又不自觉地美化了这段记忆，可能这就是心境的作用吧。\nP3R在我心中是一部瑕不掩瑜的作品，剧情平淡，COOP上下限齐飞，战斗一如既往的无聊，但人设和美术相比P5R更吸引我，也贡献了一场神演出。最终它带给我的是一段有时坐牢有时欢乐的游戏体验，还有无忧无虑向朋友吐槽的愉快时光。\n前段时间也听说了SEGA宣布要推出P4重制版的消息，很期待这部被许多P系列粉丝称为“白月光”的作品，却又担心在往后的工作生活中，自己能不能再以轻松愉快的心境体验更多游戏。\n最后，再次感谢赞助P3R steam版的HWH，以及再次督促其尽快购买DLC！\n","categories":["游戏"]},{"title":"Hello World","url":"/posts/3eeb.html","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"初次见面","url":"/posts/2431.html","content":"现在是2025年8月30日凌晨2:42。\n刚刚跟随yuumiy的hexo个人博客搭建指南完成了自己的GitHub Pages博客搭建。感谢yummiy写的非常详细，从昨天晚上十点左右开始着手，搭建过程中基本没遇到什么困难。以后可能会在这里发布一些学习笔记、生活日记等。\n\n\n\n\n\n为什么想做个人博客？\n\n原因上来说是想在互联网上找个角落记录一下自己的日常生活以及学习感悟，一方面督促自己反思总结，另一方面在互联网上留下点自己的痕迹。\n说来很奇怪，以前的自己非常排斥留下影像、文字资料（可能是中二病作祟），现在却好像害怕自己消失之后与这个世界再无联系，包括目前的人生终极目标也是想在无尽的时空长河中留下自己的名字。\n有些扯远了，总之目前的自己需要一个输出自己的学习感悟和脑海中想法的地方，暂定在这里了。\n\n为什么选择GitHub Pages？\n\n之前尝试过使用一些本地的笔记软件，虽然可以云端同步，但终归不太方便。\n也尝试过一些在线的个人博客网站，都因为广告、网站寿命等问题没有看中。\n最近也调研了一些个人网站的部署方法，这些方法大多太过复杂，不愿意将就的话就需要在另一个领域深入学习，目前还是想把主要精力放在自己的专业领域。\n前天晚上在b站刷到yummiy的评论，本人作为懒狗和穷鬼，一眼就看中了这套Github Pages + hexo + Next的框架，把模板和样式交给hexo和Next，像使用git一样发布文章，非常舒服。\n\n夜深了，睡觉。\n","categories":["随笔"]}]